{"version":3,"sources":["components/NavBar/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/Headshot/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","children","Jumbotron","Wrapper","Headshot","onClick","reorderHeadshots","id","alt","name","src","image","Score","score","ReactModal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","App","state","characters","showModal","continueHappyPath","_this","i","length","clicked","map","item","Object","objectSpread","sort","b","Math","random","setState","handleOpenModal","handleCloseModal","this","_this2","Fragment","components_NavBar","components_Score","components_Jumbotron","components_Wrapper","character","components_Headshot","key","lib_default","isOpen","onRequestClose","style","contentLabel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f576e42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark got-theme\">\r\n            <span className=\"navbar-brand mb-0 h1\">\r\n                Game of Clicks\r\n            </span>\r\n            <span className=\"h4 mb-0\">\r\n                Click an image to begin!\r\n            </span>\r\n            <div className=\"score\">{props.children}</div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid jumbo-got text-center\">\r\n            <h1 className=\"dark-text\">The Game of Clicks</h1>\r\n            <p className=\"dark-text\">Click the GoT characters to get points. But don't click the same one twice!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Headshot(props) {\r\n    // debugger;\r\n    return (\r\n        <div onClick={() => props.reorderHeadshots(props.id)} className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Headshot;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <span className=\"h4 mb-0\">\r\n            Score: {props.score}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\nimport NavBar from \"./components/NavBar\";\r\nimport Jumbotron from './components/Jumbotron';\r\nimport Wrapper from './components/Wrapper';\r\nimport Headshot from \"./components/Headshot\";\r\nimport Score from \"./components/Score\";\r\nimport characters from \"./characters.json\";\r\nimport ReactModal from \"react-modal\";\r\nReactModal.setAppElement(\"#modal\");\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)'\r\n  }\r\n};\r\n\r\n\r\nclass App extends Component {\r\n  \r\n    state = {\r\n      characters,\r\n      score: 0,\r\n      showModal: false\r\n    }; \r\n    \r\n\r\n  reorderHeadshots = id => {\r\n    let continueHappyPath = true;\r\n    let score = this.state.score + 1;\r\n    // Check if this image has been clicked\r\n    for (var i = 0; i < this.state.characters.length; i++) {\r\n      if(this.state.characters[i].id === id && this.state.characters[i].clicked) {\r\n         // If already clicked, end game\r\n        // Reset score to zero\r\n        score = 0;\r\n        continueHappyPath = false;\r\n        let characters = this.state.characters.map(item => {\r\n          return {\r\n            ...item,\r\n            clicked: false\r\n          };\r\n        })\r\n      }\r\n    }\r\n    \r\n    // Update the clicked property of that component\r\n    if(continueHappyPath) {\r\n      let updatedCharacters = this.state.characters.map(item => {\r\n        if (item.id === id) {\r\n          item.clicked = true;\r\n        }\r\n        return item;\r\n      });\r\n    }\r\n     \r\n    let characters = this.state.characters.sort(function(a, b) {\r\n      return 0.5 - Math.random()\r\n    });\r\n    this.setState({ characters, score });\r\n  };\r\n\r\ncomponentDidUpdate() {\r\n  // Lowering win threshold for testing\r\n  if(this.state.score === 12 && this.state.showModal === false) {\r\n    this.handleOpenModal();\r\n    this.setState({ score: 0, characters });\r\n  }\r\n}\r\n\r\n  // Modal-related functionality\r\nhandleOpenModal = () => {\r\n  this.setState({ showModal: true });\r\n}\r\n\r\nhandleCloseModal = () => {\r\n    this.setState({ showModal: false });\r\n};\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <NavBar>\r\n        <Score\r\n        reorderHeadshots = {this.reorderHeadshots}\r\n        score={this.state.score}\r\n        />\r\n      </NavBar>\r\n      <Jumbotron></Jumbotron>\r\n      <Wrapper>\r\n      {this.state.characters.map(character => (\r\n        <Headshot\r\n          reorderHeadshots = {this.reorderHeadshots}\r\n          id={character.id}\r\n          key={character.id}\r\n          name={character.name}\r\n          image={character.image}\r\n          clicked={character.clicked}\r\n        />\r\n      ))}\r\n      </Wrapper>\r\n      <ReactModal \r\n            isOpen={this.state.showModal}\r\n            onRequestClose={this.handleCloseModal}\r\n            style={customStyles}\r\n            contentLabel=\"Sign In Modal\"\r\n            >\r\n            <h3>You Won!</h3>\r\n            <button onClick={this.handleCloseModal}>Close</button>\r\n        </ReactModal>   \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}