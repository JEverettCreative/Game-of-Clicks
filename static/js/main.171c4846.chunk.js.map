{"version":3,"sources":["components/NavBar/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/Headshot/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","children","Jumbotron","Wrapper","Headshot","onClick","reorderHeadshots","id","alt","name","src","image","Score","score","App","state","characters","continueHappyPath","_this","i","length","clicked","map","item","Object","objectSpread","sort","b","Math","random","setState","_this2","this","Fragment","components_NavBar","components_Score","components_Jumbotron","components_Wrapper","character","components_Headshot","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+qCAiBeA,MAdf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,kBAGAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,4BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMK,kBCA3BC,MATf,WACI,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,sBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,uFCAGG,MAJf,SAAiBP,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCU1BG,MAXf,SAAkBR,GAEd,OACIC,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMU,iBAAiBV,EAAMW,KAAKP,UAAU,QAChEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,iBCG9BC,MARf,SAAehB,GACX,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,UACYJ,EAAMiB,eCmFXC,6MA7EXC,MAAQ,CACNC,aACAH,MAAO,KAGXP,iBAAmB,SAAAC,GAKjB,IAJA,IAAIU,GAAoB,EACpBJ,EAAQK,EAAKH,MAAMF,MAAQ,EAGtBM,EAAI,EAAGA,EAAID,EAAKH,MAAMC,WAAWI,OAAQD,IAChD,GAAGD,EAAKH,MAAMC,WAAWG,GAAGZ,KAAOA,GAAMW,EAAKH,MAAMC,WAAWG,GAAGE,QAAS,CAGzER,EAAQ,EACRI,GAAoB,EACHC,EAAKH,MAAMC,WAAWM,IAAI,SAAAC,GACzC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFD,EADL,CAEEF,SAAS,MAOjB,GAAGJ,EACuBC,EAAKH,MAAMC,WAAWM,IAAI,SAAAC,GAIhD,OAHIA,EAAKhB,KAAOA,IACdgB,EAAKF,SAAU,GAEVE,IAIX,IAAIP,EAAaE,EAAKH,MAAMC,WAAWU,KAAK,SAAS5B,EAAG6B,GACtD,MAAO,GAAMC,KAAKC,WAEpBX,EAAKY,SAAS,CAAEd,aAAYH,mFAUrB,IAAAkB,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmC,SAAA,KACApC,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,CACA7B,iBAAoB0B,KAAK1B,iBACzBO,MAAOmB,KAAKjB,MAAMF,SAGpBhB,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,KACCL,KAAKjB,MAAMC,WAAWM,IAAI,SAAAgB,GAAS,OAClCzC,EAAAC,EAAAC,cAACwC,EAAD,CACEjC,iBAAoByB,EAAKzB,iBACzBC,GAAI+B,EAAU/B,GACdiC,IAAKF,EAAU/B,GACfE,KAAM6B,EAAU7B,KAChBE,MAAO2B,EAAU3B,MACjBU,QAASiB,EAAUjB,qBApEXoB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.171c4846.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-dark got-theme\">\r\n            <span className=\"navbar-brand mb-0 h1\">\r\n                Game of Clicks\r\n            </span>\r\n            <span className=\"h4 mb-0\">\r\n                Click an image to begin!\r\n            </span>\r\n            <div className=\"score\">{props.children}</div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid jumbo-got text-center\">\r\n            <h1 className=\"dark-text\">The Game of Clicks</h1>\r\n            <p className=\"dark-text\">Click the GoT characters to get points. But don't click the same one twice!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Headshot(props) {\r\n    // debugger;\r\n    return (\r\n        <div onClick={() => props.reorderHeadshots(props.id)} className=\"card\">\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Headshot;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <span className=\"h4 mb-0\">\r\n            Score: {props.score}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport Jumbotron from './components/Jumbotron';\nimport Wrapper from './components/Wrapper';\nimport Headshot from \"./components/Headshot\";\nimport Score from \"./components/Score\";\nimport characters from \"./characters.json\";\n\n\n\nclass App extends Component {\n  \n    state = {\n      characters,\n      score: 0\n    }; \n\n  reorderHeadshots = id => {\n    let continueHappyPath = true;\n    let score = this.state.score + 1;\n    // Check if this image has been clicked\n      // Else\n    for (var i = 0; i < this.state.characters.length; i++) {\n      if(this.state.characters[i].id === id && this.state.characters[i].clicked) {\n         // If already clicked, end game\n        // Reset score to zero\n        score = 0;\n        continueHappyPath = false;\n        let characters = this.state.characters.map(item => {\n          return {\n            ...item,\n            clicked: false\n          };\n        })\n      }\n    }\n    \n    // Update the clicked property of that component\n    if(continueHappyPath) {\n      let updatedCharacters = this.state.characters.map(item => {\n        if (item.id === id) {\n          item.clicked = true;\n        }\n        return item;\n      });\n    }\n     \n    let characters = this.state.characters.sort(function(a, b) {\n      return 0.5 - Math.random()\n    });\n    this.setState({ characters, score });\n  };\n\n//   sortImages = (characters) => {\n//     characters.sort(function(a, b) {\n//     return 0.5 - Math.random()\n//   });\n// };\n\n\n  render() {\n    return (\n      <>\n      <NavBar>\n        <Score\n        reorderHeadshots = {this.reorderHeadshots}\n        score={this.state.score}\n        />\n      </NavBar>\n      <Jumbotron></Jumbotron>\n      <Wrapper>\n      {this.state.characters.map(character => (\n        <Headshot\n          reorderHeadshots = {this.reorderHeadshots}\n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}\n          clicked={character.clicked}\n        />\n      ))}\n      </Wrapper>\n      </>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}